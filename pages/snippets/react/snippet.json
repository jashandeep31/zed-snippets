{
  "exportType": {
    "prefix": "exptp",
    "body": ["export type ${1:first} = {${2:second}}"],
    "description": "exportType"
  },
  "exportInterface": {
    "prefix": "expint",
    "body": ["export interface ${1:first} {${2:second}}"],
    "description": "exportInterface"
  },
  "Creates a React component class with ES7 module system and TypeScript interfaces": {
    "prefix": "tsrce",
    "body": [
      "import React, { Component } from 'react'",
      "",
      "type Props = {}",
      "",
      "type State = {}",
      "",
      "class ${1:${TM_FILENAME_BASE}} extends Component<Props, State> {",
      "  state = {}",
      "",
      "  render() {",
      "    return (",
      "      <div>${1:first}</div>",
      "    )",
      "  }",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}"
    ],
    "description": "Creates a React component class with ES7 module system and TypeScript interfaces"
  },
  "Creates a React Functional Component with ES7 module system and TypeScript interface": {
    "prefix": "tsrfc",
    "body": [
      "import React from 'react'",
      "",
      "type Props = {}",
      "",
      "export default function ${1:${TM_FILENAME_BASE}}({}: Props) {",
      "  return (",
      "    <div>${1:first}</div>",
      "  )",
      "}"
    ],
    "description": "Creates a React Functional Component with ES7 module system and TypeScript interface"
  },
  "Creates a React Arrow Function Component with ES7 module system and TypeScript interface": {
    "prefix": "tsrafc",
    "body": [
      "import React from 'react'",
      "",
      "type Props = {}",
      "",
      "const ${1:${TM_FILENAME_BASE}} = (props: Props) => {",
      "  return (",
      "    <div>${1:first}</div>",
      "  )",
      "}"
    ],
    "description": "Creates a React Arrow Function Component with ES7 module system and TypeScript interface"
  },
  "Creates a React pure component class with ES7 module system and TypeScript interface": {
    "prefix": "tsrpce",
    "body": [
      "import React, { PureComponent } from 'react'",
      "",
      "type Props = {}",
      "",
      "class ${1:${TM_FILENAME_BASE}} extends PureComponent<Props> {",
      "  render() {",
      "    return (",
      "      <div>${1:first}</div>",
      "    )",
      "  }",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}"
    ],
    "description": "Creates a React pure component class with ES7 module system and TypeScript interface"
  },
  "Creates a React component class with connected redux and ES7 module system and TypeScript interfaces": {
    "prefix": "tsrcredux",
    "body": [
      "import { connect } from 'react-redux'",
      "import React, { Component } from 'react'",
      "",
      "type Props = {}",
      "",
      "type State = {}",
      "",
      "export class ${1:${TM_FILENAME_BASE}} extends Component<Props, State> {",
      "  state = {}",
      "",
      "  render() {",
      "    return (",
      "      <div>${1:first}</div>",
      "    )",
      "  }",
      "}",
      "",
      "const mapStateToProps = (state) => ({})",
      "",
      "const mapDispatchToProps = {}",
      "",
      "export default connect(mapStateToProps, mapDispatchToProps)(${1:${TM_FILENAME_BASE}})"
    ],
    "description": "Creates a React component class with connected redux and ES7 module system and TypeScript interfaces"
  },
  "Creates a React Native Arrow Function Component with ES7 module system in TypeScript": {
    "prefix": "tsrnf",
    "body": [
      "import { View, Text } from 'react-native'",
      "import React from 'react'",
      "",
      "type Props = {}",
      "",
      "const ${1:${TM_FILENAME_BASE}} = (props: Props) => {",
      "  return (",
      "    <View>",
      "      <Text>${1:first}</Text>",
      "    </View>",
      "  )",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}"
    ],
    "description": "Creates a React Native Arrow Function Component with ES7 module system in TypeScript"
  },
  "Creates a React Native Arrow Function Component with ES7 module system, TypeScript interface and StyleSheet": {
    "prefix": "tsrnfs",
    "body": [
      "import { StyleSheet, Text, View } from 'react-native'",
      "import React from 'react'",
      "",
      "type Props = {}",
      "",
      "const ${1:${TM_FILENAME_BASE}} = (props: Props) => {",
      "  return (",
      "    <View>",
      "      <Text>${1:first}</Text>",
      "    </View>",
      "  )",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}",
      "",
      "const styles = StyleSheet.create({})"
    ],
    "description": "Creates a React Native Arrow Function Component with ES7 module system, TypeScript interface and StyleSheet"
  },
  "Creates a React Arrow Function Component with ES7 module system": {
    "prefix": "rafce",
    "body": [
      "import React from 'react'",
      "",
      "const ${1:${TM_FILENAME_BASE}} = () => {",
      "  return (",
      "    <div>${1:first}</div>",
      "  )",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}"
    ],
    "description": "Creates a React Arrow Function Component with ES7 module system"
  },
  "Creates a React Arrow Function Component with ES7 module system with PropTypes": {
    "prefix": "rafcp",
    "body": [
      "import React from 'react'",
      "import PropTypes from 'prop-types'",
      "",
      "const ${1:${TM_FILENAME_BASE}} = props => {",
      "  return (",
      "    <div>${1:first}</div>",
      "  )",
      "}",
      "",
      "${1:${TM_FILENAME_BASE}}.propTypes = {}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}"
    ],
    "description": "Creates a React Arrow Function Component with ES7 module system with PropTypes"
  },
  "Creates a React component class with ES7 module system": {
    "prefix": "rpcp",
    "body": [
      "import PropTypes from 'prop-types'",
      "import React, { PureComponent } from 'react'",
      "",
      "export default class ${1:${TM_FILENAME_BASE}} extends PureComponent {",
      "  static propTypes = {}",
      "",
      "  render() {",
      "    return (",
      "      <div>${1:first}</div>",
      "    )",
      "  }",
      "}",
      ""
    ],
    "description": "Creates a React component class with ES7 module system"
  },
  "Creates a React component class with PropTypes and ES7 module system": {
    "prefix": "rccp",
    "body": [
      "import PropTypes from 'prop-types'",
      "import React, { Component } from 'react'",
      "",
      "export default class ${1:${TM_FILENAME_BASE}} extends Component {",
      "  static propTypes = {${2:second}: ${3:third}}",
      "",
      "  render() {",
      "    return (",
      "      <div>${1:first}</div>",
      "    )",
      "  }",
      "}",
      ""
    ],
    "description": "Creates a React component class with PropTypes and ES7 module system"
  },
  "Creates a React component class with connected redux and ES7 module system": {
    "prefix": "rcredux",
    "body": [
      "import React, { Component } from 'react'",
      "import { connect } from 'react-redux'",
      "",
      "export class ${1:${TM_FILENAME_BASE}} extends Component {",
      "  render() {",
      "    return (",
      "      <div>${1:first}</div>",
      "    )",
      "  }",
      "}",
      "",
      "const mapStateToProps = (state) => ({})",
      "",
      "const mapDispatchToProps = {}",
      "",
      "export default connect(mapStateToProps, mapDispatchToProps)(${1:${TM_FILENAME_BASE}})"
    ],
    "description": "Creates a React component class with connected redux and ES7 module system"
  },
  "Creates a React component class with PropTypes with connected redux and ES7 module system": {
    "prefix": "rcreduxp",
    "body": [
      "import PropTypes from 'prop-types'",
      "import React, { Component } from 'react'",
      "import { connect } from 'react-redux'",
      "",
      "export class ${1:${TM_FILENAME_BASE}} extends Component {",
      "  static propTypes = {",
      "    ${2:second}: ${3:third}",
      "  }",
      "",
      "  render() {",
      "    return (",
      "      <div>${1:first}</div>",
      "    )",
      "  }",
      "}",
      "",
      "const mapStateToProps = (state) => ({})",
      "",
      "const mapDispatchToProps = {}",
      "",
      "export default connect(mapStateToProps, mapDispatchToProps)(${1:${TM_FILENAME_BASE}})"
    ],
    "description": "Creates a React component class with PropTypes with connected redux and ES7 module system"
  },
  "Creates a React pure component class with ES7 module system export": {
    "prefix": "rpce",
    "body": [
      "import React, { PureComponent } from 'react'",
      "",
      "export class ${1:${TM_FILENAME_BASE}} extends PureComponent {",
      "  render() {",
      "    return (",
      "      <div>${1:first}</div>",
      "    )",
      "  }",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}"
    ],
    "description": "Creates a React pure component class with ES7 module system export"
  },
  "Creates a React pure component class with ES7 module system": {
    "prefix": "rpc",
    "body": [
      "import React, { PureComponent } from 'react'",
      "",
      "export default class ${1:${TM_FILENAME_BASE}} extends PureComponent {",
      "  render() {",
      "    return (",
      "      <div>${1:first}</div>",
      "    )",
      "  }",
      "}",
      ""
    ],
    "description": "Creates a React pure component class with ES7 module system"
  },
  "Creates a React Memo Function Component with ES7 module system": {
    "prefix": "rmc",
    "body": [
      "import React, { memo } from 'react'",
      "",
      "const ${1:${TM_FILENAME_BASE}} = memo(() => {",
      "  return (",
      "    <div>${1:first}</div>",
      "  )",
      "})",
      "",
      "export default ${1:${TM_FILENAME_BASE}}"
    ],
    "description": "Creates a React Memo Function Component with ES7 module system"
  },
  "Creates a React Memo Function Component with ES7 module system with PropTypes": {
    "prefix": "rmcp",
    "body": [
      "import PropTypes from 'prop-types'",
      "import React, { memo } from 'react'",
      "",
      "const ${1:${TM_FILENAME_BASE}} = memo((props) => {",
      "  return (",
      "    <div>${1:first}</div>",
      "  )",
      "})",
      "",
      "${1:${TM_FILENAME_BASE}}.propTypes = {}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}"
    ],
    "description": "Creates a React Memo Function Component with ES7 module system with PropTypes"
  },
  "Creates a React Functional Component with ES7 module system": {
    "prefix": "rfce",
    "body": [
      "import React from 'react'",
      "",
      "function ${1:${TM_FILENAME_BASE}}() {",
      "  return (",
      "    <div>${1:first}</div>",
      "  )",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}"
    ],
    "description": "Creates a React Functional Component with ES7 module system"
  },
  "Creates a React functional component with connected redux and ES7 module system": {
    "prefix": "rfcredux",
    "body": [
      "import React from 'react'",
      "import { connect } from 'react-redux'",
      "",
      "export const ${1:${TM_FILENAME_BASE}} = (props) => {",
      "  return (",
      "    <div>${1:first}</div>",
      "  )",
      "}",
      "",
      "const mapStateToProps = (state) => ({})",
      "",
      "const mapDispatchToProps = {}",
      "",
      "export default connect(mapStateToProps, mapDispatchToProps)(${1:${TM_FILENAME_BASE}})"
    ],
    "description": "Creates a React functional component with connected redux and ES7 module system"
  },
  "DEPRECATED: Creates a React functional component with PropTypes with connected redux and ES7 module system": {
    "prefix": "rfcreduxp",
    "body": [
      "import PropTypes from 'prop-types'",
      "import React from 'react'",
      "import { connect } from 'react-redux'",
      "",
      "export const ${1:${TM_FILENAME_BASE}} = (props) => {",
      "  return (",
      "    <div>${1:first}</div>",
      "  )",
      "}",
      "",
      "${1:${TM_FILENAME_BASE}}.propTypes = {",
      "  ${2:second}: PropTypes.${3:third}",
      "}",
      "",
      "const mapStateToProps = (state) => ({})",
      "",
      "const mapDispatchToProps = {}",
      "",
      "export default connect(mapStateToProps, mapDispatchToProps)(${1:${TM_FILENAME_BASE}})"
    ],
    "description": "DEPRECATED: Creates a React functional component with PropTypes with connected redux and ES7 module system"
  },
  "Creates a React Functional Component with ES7 module system with PropTypes": {
    "prefix": "rfcp",
    "body": [
      "import React from 'react'",
      "import PropTypes from 'prop-types'",
      "",
      "function ${1:${TM_FILENAME_BASE}}(props) {",
      "  return (",
      "    <div>${1:first}</div>",
      "  )",
      "}",
      "",
      "${1:${TM_FILENAME_BASE}}.propTypes = {}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}",
      ""
    ],
    "description": "Creates a React Functional Component with ES7 module system with PropTypes"
  },
  "If the specified expression is false, the message is written to the console along with a stack trace": {
    "prefix": "cas",
    "body": ["console.assert(${1:first}, ${2:second})"],
    "description": "If the specified expression is false, the message is written to the console along with a stack trace"
  },
  "Clears the console": {
    "prefix": "ccl",
    "body": ["console.clear()"],
    "description": "Clears the console"
  },
  "Writes the the number of times that count() has been invoked at the same line and with the same label": {
    "prefix": "cco",
    "body": ["console.count(${1:first})"],
    "description": "Writes the the number of times that count() has been invoked at the same line and with the same label"
  },
  "Prints a JavaScript representation of the specified object": {
    "prefix": "cdi",
    "body": ["console.dir(${1:first})"],
    "description": "Prints a JavaScript representation of the specified object"
  },
  "Displays a message in the console and also includes a stack trace from where the method was called": {
    "prefix": "cer",
    "body": ["console.error(${1:first})"],
    "description": "Displays a message in the console and also includes a stack trace from where the method was called"
  },
  "Groups and indents all following output by an additional level, until console.groupEnd() is called.": {
    "prefix": "cgr",
    "body": ["console.group('${1:first}')"],
    "description": "Groups and indents all following output by an additional level, until console.groupEnd() is called."
  },
  "Closes out the corresponding console.group().": {
    "prefix": "cge",
    "body": ["console.groupEnd()"],
    "description": "Closes out the corresponding console.group()."
  },
  "Displays a message in the console": {
    "prefix": "clg",
    "body": ["console.log(${1:first})"],
    "description": "Displays a message in the console"
  },
  "Prints a stack trace from the point where the method was called": {
    "prefix": "ctr",
    "body": ["console.trace(${1:first})"],
    "description": "Prints a stack trace from the point where the method was called"
  },
  "Logs property with name.": {
    "prefix": "clo",
    "body": ["console.log('${1:first}', ${1:first})"],
    "description": "Logs property with name."
  },
  "Logs stringified JSON property with name.": {
    "prefix": "clj",
    "body": ["console.log('${1:first}', JSON.stringify(${1:first}, null, 2))"],
    "description": "Logs stringified JSON property with name."
  },
  "Console time wrapper": {
    "prefix": "ctm",
    "body": ["console.time('${1:first}')"],
    "description": "Console time wrapper"
  },
  "Console time end wrapper": {
    "prefix": "cte",
    "body": ["console.timeEnd('${1:first}')"],
    "description": "Console time end wrapper"
  },
  "Displays a message in the console but also displays a yellow warning icon along with the logged message": {
    "prefix": "cwa",
    "body": ["console.warn(${1:first})"],
    "description": "Displays a message in the console but also displays a yellow warning icon along with the logged message"
  },
  "Displays a message in the console but also displays a blue information icon along with the logged message": {
    "prefix": "cin",
    "body": ["console.info(${1:first})"],
    "description": "Displays a message in the console but also displays a blue information icon along with the logged message"
  },
  "Logs table to console": {
    "prefix": "ctl",
    "body": ["console.table([${1:first}])"],
    "description": "Logs table to console"
  },
  "useCallback": {
    "prefix": "useCallbackSnippet",
    "body": [
      "useCallback(",
      "  () => {",
      "    ${1:first}",
      "  },",
      "  [${2:second}],",
      ")",
      ""
    ],
    "description": "useCallback"
  },
  "useContext": {
    "prefix": "useContextSnippet",
    "body": ["const ${1:first} = useContext(${2:second})"],
    "description": "useContext"
  },
  "useEffect": {
    "prefix": "useEffectSnippet",
    "body": [
      "useEffect(() => {",
      "  ${1:first}",
      "",
      "  return () => {",
      "    ${2:second}",
      "  }",
      "}, [${3:third}])",
      ""
    ],
    "description": "useEffect"
  },
  "useImperativeHandle": {
    "prefix": "useImperativeHandleSnippet",
    "body": [
      "useImperativeHandle(",
      "  ${1:first},",
      "  () => {",
      "    ${2:second}",
      "  },",
      "  [${3:third}],",
      ")"
    ],
    "description": "useImperativeHandle"
  },
  "useLayoutEffect": {
    "prefix": "useLayoutEffectSnippet",
    "body": [
      "useLayoutEffect(() => {",
      "  ${1:first}",
      "",
      "  return () => {",
      "    ${2:second}",
      "  };",
      "}, [${3:third}])"
    ],
    "description": "useLayoutEffect"
  },
  "useMemo": {
    "prefix": "useMemoSnippet",
    "body": ["useMemo(() => ${1:first}, [${2:second}])"],
    "description": "useMemo"
  },
  "useReducer": {
    "prefix": "useReducerSnippet",
    "body": [
      "const [state, dispatch] = useReducer(${1:first}, ${2:second}, ${3:third})"
    ],
    "description": "useReducer"
  },
  "useRef": {
    "prefix": "useRefSnippet",
    "body": ["const ${1:first} = useRef(${2:second})"],
    "description": "useRef"
  },
  "useState": {
    "prefix": "useStateSnippet",
    "body": [
      "const [${1:first}, set${1/(.*)/${1:/capitalize}/}] = useState(${2:second})"
    ],
    "description": "useState"
  },
  "importAs": {
    "prefix": "ima",
    "body": ["import { ${2:second} as ${3:third} } from '${1:first}'"],
    "description": "importAs"
  },
  "importBrowserRouter": {
    "prefix": "imbr",
    "body": ["import { BrowserRouter as Router } from 'react-router-dom'"],
    "description": "importBrowserRouter"
  },
  "importBrowserRouterWithRouteAndNavLink": {
    "prefix": "imrr",
    "body": [
      "import { BrowserRouter as Router, Route, NavLink } from 'react-router-dom'",
      ""
    ],
    "description": "importBrowserRouterWithRouteAndNavLink"
  },
  "importDestructing": {
    "prefix": "imd",
    "body": ["import { ${2:second} } from '${1:first}'"],
    "description": "importDestructing"
  },
  "importEverything": {
    "prefix": "ime",
    "body": ["import * as ${2:second} from '${1:first}'"],
    "description": "importEverything"
  },
  "importNoModuleName": {
    "prefix": "imn",
    "body": ["import '${1:first}'"],
    "description": "importNoModuleName"
  },
  "importPropTypes": {
    "prefix": "impt",
    "body": ["import PropTypes from 'prop-types'"],
    "description": "importPropTypes"
  },
  "importReact": {
    "prefix": "imr",
    "body": ["import React from 'react'"],
    "description": "importReact"
  },
  "importReactDom": {
    "prefix": "imrd",
    "body": ["import ReactDOM from 'react-dom'"],
    "description": "importReactDom"
  },
  "importReactWithComponent": {
    "prefix": "imrc",
    "body": ["import React, { Component } from 'react'"],
    "description": "importReactWithComponent"
  },
  "importReactWithComponentAndPropTypes": {
    "prefix": "imrcp",
    "body": [
      "import React, { Component } from 'react'",
      "import PropTypes from 'prop-types'",
      ""
    ],
    "description": "importReactWithComponentAndPropTypes"
  },
  "importReactWithMemo": {
    "prefix": "imrm",
    "body": ["import React, { memo } from 'react'"],
    "description": "importReactWithMemo"
  },
  "importReactWithMemoAndPropTypes": {
    "prefix": "imrmp",
    "body": [
      "import React, { memo } from 'react'",
      "import PropTypes from 'prop-types'",
      ""
    ],
    "description": "importReactWithMemoAndPropTypes"
  },
  "importReactWithPureComponent": {
    "prefix": "imrpc",
    "body": ["import React, { PureComponent } from 'react'"],
    "description": "importReactWithPureComponent"
  },
  "importReactWithPureComponentAndPropTypes": {
    "prefix": "imrpcp",
    "body": [
      "import React, { PureComponent } from 'react'",
      "import PropTypes from 'prop-types'",
      ""
    ],
    "description": "importReactWithPureComponentAndPropTypes"
  },
  "importRouterLink": {
    "prefix": "imbrl",
    "body": ["import { Link } from 'react-router-dom'"],
    "description": "importRouterLink"
  },
  "importRouterNavLink": {
    "prefix": "imbrnl",
    "body": ["import { NavLink } from 'react-router-dom'"],
    "description": "importRouterNavLink"
  },
  "importRouterSetup": {
    "prefix": "imbrc",
    "body": ["import { Route, Switch, NavLink, Link } from 'react-router-dom'"],
    "description": "importRouterSetup"
  },
  "importRouterSwitch": {
    "prefix": "imbrs",
    "body": ["import { Switch } from 'react-router-dom'"],
    "description": "importRouterSwitch"
  },
  "import": {
    "prefix": "imp",
    "body": ["import ${2:second} from '${1:first}'"],
    "description": "import"
  },
  "Array prop type": {
    "prefix": "pta",
    "body": ["PropTypes.array"],
    "description": "Array prop type"
  },
  "Array prop type required": {
    "prefix": "ptar",
    "body": ["PropTypes.array.isRequired"],
    "description": "Array prop type required"
  },
  "Bool prop type": {
    "prefix": "ptb",
    "body": ["PropTypes.bool"],
    "description": "Bool prop type"
  },
  "Bool prop type required": {
    "prefix": "ptbr",
    "body": ["PropTypes.bool.isRequired"],
    "description": "Bool prop type required"
  },
  "Func prop type": {
    "prefix": "ptf",
    "body": ["PropTypes.func"],
    "description": "Func prop type"
  },
  "Func prop type required": {
    "prefix": "ptfr",
    "body": ["PropTypes.func.isRequired"],
    "description": "Func prop type required"
  },
  "Number prop type": {
    "prefix": "ptn",
    "body": ["PropTypes.number"],
    "description": "Number prop type"
  },
  "Number prop type required": {
    "prefix": "ptnr",
    "body": ["PropTypes.number.isRequired"],
    "description": "Number prop type required"
  },
  "Object prop type": {
    "prefix": "pto",
    "body": ["PropTypes.object"],
    "description": "Object prop type"
  },
  "Object prop type required": {
    "prefix": "ptor",
    "body": ["PropTypes.object.isRequired"],
    "description": "Object prop type required"
  },
  "String prop type": {
    "prefix": "pts",
    "body": ["PropTypes.string"],
    "description": "String prop type"
  },
  "String prop type required": {
    "prefix": "ptsr",
    "body": ["PropTypes.string.isRequired"],
    "description": "String prop type required"
  },
  "Anything that can be rendered: numbers, strings, elements or an array": {
    "prefix": "ptnd",
    "body": ["PropTypes.node"],
    "description": "Anything that can be rendered: numbers, strings, elements or an array"
  },
  "Anything that can be rendered: numbers, strings, elements or an array required": {
    "prefix": "ptndr",
    "body": ["PropTypes.node.isRequired"],
    "description": "Anything that can be rendered: numbers, strings, elements or an array required"
  },
  "React element prop type": {
    "prefix": "ptel",
    "body": ["PropTypes.element"],
    "description": "React element prop type"
  },
  "React element prop type required": {
    "prefix": "ptelr",
    "body": ["PropTypes.element.isRequired"],
    "description": "React element prop type required"
  },
  "Is an instance of a class prop type": {
    "prefix": "pti",
    "body": ["PropTypes.instanceOf($0)"],
    "description": "Is an instance of a class prop type"
  },
  "Is an instance of a class prop type required": {
    "prefix": "ptir",
    "body": ["PropTypes.instanceOf($0).isRequired"],
    "description": "Is an instance of a class prop type required"
  },
  "Prop type limited to specific values by treating it as an enum": {
    "prefix": "pte",
    "body": ["PropTypes.oneOf(['$0'])"],
    "description": "Prop type limited to specific values by treating it as an enum"
  },
  "Prop type limited to specific values by treating it as an enum required": {
    "prefix": "pter",
    "body": ["PropTypes.oneOf(['$0']).isRequired"],
    "description": "Prop type limited to specific values by treating it as an enum required"
  },
  "An object that could be one of many types": {
    "prefix": "ptet",
    "body": ["PropTypes.oneOfType([", "  $0", "])"],
    "description": "An object that could be one of many types"
  },
  "An object that could be one of many types required": {
    "prefix": "ptetr",
    "body": ["PropTypes.oneOfType([", "  $0", "]).isRequired"],
    "description": "An object that could be one of many types required"
  },
  "An array of a certain type": {
    "prefix": "ptao",
    "body": ["PropTypes.arrayOf($0)"],
    "description": "An array of a certain type"
  },
  "An array of a certain type required": {
    "prefix": "ptaor",
    "body": ["PropTypes.arrayOf($0).isRequired"],
    "description": "An array of a certain type required"
  },
  "An object with property values of a certain type": {
    "prefix": "ptoo",
    "body": ["PropTypes.objectOf($0)"],
    "description": "An object with property values of a certain type"
  },
  "An object with property values of a certain type required": {
    "prefix": "ptoor",
    "body": ["PropTypes.objectOf($0).isRequired"],
    "description": "An object with property values of a certain type required"
  },
  "An object taking on a particular shape": {
    "prefix": "ptsh",
    "body": ["PropTypes.shape({", "  $0", "})"],
    "description": "An object taking on a particular shape"
  },
  "An object taking on a particular shape required": {
    "prefix": "ptshr",
    "body": ["PropTypes.shape({", "  $0", "}).isRequired"],
    "description": "An object taking on a particular shape required"
  },
  "An object with warnings on extra properties": {
    "prefix": "ptex",
    "body": ["PropTypes.exact({", "  $0", "})"],
    "description": "An object with warnings on extra properties"
  },
  "An object with warnings on extra properties required": {
    "prefix": "ptexr",
    "body": ["PropTypes.exact({", "  $0", "}).isRequired"],
    "description": "An object with warnings on extra properties required"
  },
  "Any prop type": {
    "prefix": "ptany",
    "body": ["PropTypes.any"],
    "description": "Any prop type"
  },
  "reactNativeComponent": {
    "prefix": "rnc",
    "body": [
      "import { Text, View } from 'react-native'",
      "import React, { Component } from 'react'",
      "",
      "export default class ${1:${TM_FILENAME_BASE}} extends Component {",
      "  render() {",
      "    return (",
      "      <View>",
      "        <Text>${1:first}</Text>",
      "      </View>",
      "    )",
      "  }",
      "}"
    ],
    "description": "reactNativeComponent"
  },
  "reactNativeComponentExport": {
    "prefix": "rnce",
    "body": [
      "import { Text, View } from 'react-native'",
      "import React, { Component } from 'react'",
      "",
      "export class ${1:${TM_FILENAME_BASE}} extends Component {",
      "  render() {",
      "    return (",
      "      <View>",
      "        <Text>${1:first}</Text>",
      "      </View>",
      "    )",
      "  }",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}"
    ],
    "description": "reactNativeComponentExport"
  },
  "reactNativeComponentWithStyles": {
    "prefix": "rncs",
    "body": [
      "import { Text, StyleSheet, View } from 'react-native'",
      "import React, { Component } from 'react'",
      "",
      "export default class ${1:${TM_FILENAME_BASE}} extends Component {",
      "  render() {",
      "    return (",
      "      <View>",
      "        <Text>${1:first}</Text>",
      "      </View>",
      "    )",
      "  }",
      "}",
      "",
      "const styles = StyleSheet.create({})"
    ],
    "description": "reactNativeComponentWithStyles"
  },
  "reactNativeFunctionalComponent": {
    "prefix": "rnf",
    "body": [
      "import { View, Text } from 'react-native'",
      "import React from 'react'",
      "",
      "export default function ${1:${TM_FILENAME_BASE}}() {",
      "  return (",
      "    <View>",
      "      <Text>${1:first}</Text>",
      "    </View>",
      "  )",
      "}"
    ],
    "description": "reactNativeFunctionalComponent"
  },
  "reactNativeFunctionalComponentWithStyles": {
    "prefix": "rnfs",
    "body": [
      "import { StyleSheet, Text, View } from 'react-native'",
      "import React from 'react'",
      "",
      "export default function ${1:${TM_FILENAME_BASE}}() {",
      "  return (",
      "    <View>",
      "      <Text>${1:first}</Text>",
      "    </View>",
      "  )",
      "}",
      "",
      "const styles = StyleSheet.create({})"
    ],
    "description": "reactNativeFunctionalComponentWithStyles"
  },
  "reactNativeFunctionalExportComponent": {
    "prefix": "rnfe",
    "body": [
      "import { View, Text } from 'react-native'",
      "import React from 'react'",
      "",
      "const ${1:${TM_FILENAME_BASE}} = () => {",
      "  return (",
      "    <View>",
      "      <Text>${1:first}</Text>",
      "    </View>",
      "  )",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}"
    ],
    "description": "reactNativeFunctionalExportComponent"
  },
  "reactNativeFunctionalExportComponentWithStyles": {
    "prefix": "rnfes",
    "body": [
      "import { StyleSheet, Text, View } from 'react-native'",
      "import React from 'react'",
      "",
      "const ${1:${TM_FILENAME_BASE}} = () => {",
      "  return (",
      "    <View>",
      "      <Text>${1:first}</Text>",
      "    </View>",
      "  )",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}",
      "",
      "const styles = StyleSheet.create({})"
    ],
    "description": "reactNativeFunctionalExportComponentWithStyles"
  },
  "reactNativeImport": {
    "prefix": "imrn",
    "body": ["import { ${1:first} } from 'react-native'"],
    "description": "reactNativeImport"
  },
  "reactNativePureComponent": {
    "prefix": "rnpc",
    "body": [
      "import { Text, View } from 'react-native'",
      "import React, { PureComponent } from 'react'",
      "",
      "export default class ${1:${TM_FILENAME_BASE}} extends PureComponent {",
      "  render() {",
      "    return (",
      "      <View>",
      "        <Text>${1:first}</Text>",
      "      </View>",
      "    )",
      "  }",
      "}"
    ],
    "description": "reactNativePureComponent"
  },
  "reactNativePureComponentExport": {
    "prefix": "rnpce",
    "body": [
      "import { Text, View } from 'react-native'",
      "import React, { PureComponent } from 'react'",
      "",
      "export class ${1:${TM_FILENAME_BASE}} extends PureComponent {",
      "  render() {",
      "    return (",
      "      <View>",
      "        <Text>${1:first}</Text>",
      "      </View>",
      "    )",
      "  }",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}"
    ],
    "description": "reactNativePureComponentExport"
  },
  "reactNativeStyles": {
    "prefix": "rnstyle",
    "body": ["const styles = StyleSheet.create({${1:first}})"],
    "description": "reactNativeStyles"
  },
  "importReduxConnect": {
    "prefix": "redux",
    "body": ["import { connect } from 'react-redux'"],
    "description": "importReduxConnect"
  },
  "reduxAction": {
    "prefix": "rxaction",
    "body": [
      "export const ${1:first} = (payload) => ({",
      "  type: ${2:second},",
      "  payload",
      "})",
      ""
    ],
    "description": "reduxAction"
  },
  "reduxConst": {
    "prefix": "rxconst",
    "body": ["export const ${1:first} = '${1:first}'"],
    "description": "reduxConst"
  },
  "reduxReducer": {
    "prefix": "rxreducer",
    "body": [
      "const initialState = {}",
      "",
      "export default (state = initialState, { type, payload }) => {",
      "  switch (type) {",
      "",
      "  case ${1:first}:",
      "    return { ...state, ...payload }",
      "",
      "  default:",
      "    return state",
      "  }",
      "}",
      ""
    ],
    "description": "reduxReducer"
  },
  "reduxSelector": {
    "prefix": "rxselect",
    "body": [
      "import { createSelector } from 'reselect'",
      "",
      "export const ${1:first} = state => state.${2:second}"
    ],
    "description": "reduxSelector"
  },
  "reduxSlice": {
    "prefix": "rxslice",
    "body": [
      "import { createSlice } from '@reduxjs/toolkit'",
      "",
      "const initialState = {",
      "",
      "}",
      "",
      "const ${1:${TM_FILENAME_BASE}} = createSlice({",
      "  name: ${2:second},",
      "  initialState,",
      "  reducers: {}",
      "});",
      "",
      "export const {} = ${1:${TM_FILENAME_BASE}}.actions",
      "",
      "export default ${1:${TM_FILENAME_BASE}}.reducer"
    ],
    "description": "reduxSlice"
  },
  "mappingToProps": {
    "prefix": "reduxmap",
    "body": [
      "const mapStateToProps = (state) => ({})",
      "",
      "const mapDispatchToProps = {}"
    ],
    "description": "mappingToProps"
  },
  "Testing `describe` block": {
    "prefix": "desc",
    "body": ["describe('${1:first}', () => { ${2:second} })"],
    "description": "Testing `describe` block"
  },
  "Testing asynchronous `it` block": {
    "prefix": "tita",
    "body": ["it('should ${1:first}', async () => { ${2:second} })"],
    "description": "Testing asynchronous `it` block"
  },
  "Testing `it` block": {
    "prefix": "tit",
    "body": ["it('should ${1:first}', () => { ${2:second} })"],
    "description": "Testing `it` block"
  },
  "Create test component": {
    "prefix": "srtest",
    "body": [
      "import React from 'react'",
      "import renderer from 'react-test-renderer'",
      "import { Provider } from 'react-redux'",
      "",
      "import store from '~/store'",
      "import { ${1:${TM_FILENAME_BASE}} } from '../${1:${TM_FILENAME_BASE}}'",
      "",
      "describe('<${1:${TM_FILENAME_BASE}} />', () => {",
      "  const defaultProps = {}",
      "  const wrapper = renderer.create(",
      "    <Provider store={store}>",
      "     <${1:${TM_FILENAME_BASE}} {...defaultProps} />",
      "    </Provider>,",
      "  )",
      "",
      "  test('render', () => {",
      "    expect(wrapper).toMatchSnapshot()",
      "  })",
      "})"
    ],
    "description": "Create test component"
  },
  "setupReactNativeTest": {
    "prefix": "sntest",
    "body": [
      "import 'react-native'",
      "import React from 'react'",
      "import renderer from 'react-test-renderer'",
      "",
      "import ${1:${TM_FILENAME_BASE}} from '../${1:${TM_FILENAME_BASE}}'",
      "",
      "describe('<${1:${TM_FILENAME_BASE}} />', () => {",
      "  const defaultProps = {}",
      "  const wrapper = renderer.create(<${1:${TM_FILENAME_BASE}} {...defaultProps} />)",
      "",
      "  test('render', () => {",
      "    expect(wrapper).toMatchSnapshot()",
      "  })",
      "})"
    ],
    "description": "setupReactNativeTest"
  },
  "setupReactNativeTestWithRedux": {
    "prefix": "snrtest",
    "body": [
      "import 'react-native'",
      "import React from 'react'",
      "import renderer from 'react-test-renderer'",
      "import { Provider } from 'react-redux'",
      "",
      "import store from '~/store'",
      "import ${1:${TM_FILENAME_BASE}} from '../${1:${TM_FILENAME_BASE}}'",
      "",
      "describe('<${1:${TM_FILENAME_BASE}} />', () => {",
      "  const defaultProps = {}",
      "  const wrapper = renderer.create(",
      "    <Provider store={store}>",
      "      <${1:${TM_FILENAME_BASE}} {...defaultProps} />",
      "    </Provider>,",
      "  )",
      "",
      "  test('render', () => {",
      "    expect(wrapper).toMatchSnapshot()",
      "  })",
      "})"
    ],
    "description": "setupReactNativeTestWithRedux"
  },
  "setupReactTest": {
    "prefix": "stest",
    "body": [
      "import React from 'react'",
      "import renderer from 'react-test-renderer'",
      "",
      "import { ${1:${TM_FILENAME_BASE}} } from '../${1:${TM_FILENAME_BASE}}'",
      "",
      "describe('<${1:${TM_FILENAME_BASE}} />', () => {",
      "  const defaultProps = {}",
      "  const wrapper = renderer.create(<${1:${TM_FILENAME_BASE}} {...defaultProps} />)",
      "",
      "  test('render', () => {",
      "    expect(wrapper).toMatchSnapshot()",
      "  })",
      "})"
    ],
    "description": "setupReactTest"
  },
  "Testing `asynchronous test` block": {
    "prefix": "testa",
    "body": ["test('should ${1:first}', async () => { ${2:second} })"],
    "description": "Testing `asynchronous test` block"
  },
  "Testing `test` block": {
    "prefix": "test",
    "body": ["test('should ${1:first}', () => { ${2:second} })"],
    "description": "Testing `test` block"
  },
  "exportDefault": {
    "prefix": "exp",
    "body": ["export default ${1:first}"],
    "description": "exportDefault"
  },
  "exportDestructing": {
    "prefix": "exd",
    "body": ["export { ${2:second} } from '${1:first}'"],
    "description": "exportDestructing"
  },
  "exportAs": {
    "prefix": "exa",
    "body": ["export { ${2:second} as ${3:third} } from '${1:first}'"],
    "description": "exportAs"
  },
  "Export named function": {
    "prefix": "enf",
    "body": ["export const ${1:first} = (${2:second}) => {${3:third}}"],
    "description": "Export named function"
  },
  "Export default function": {
    "prefix": "edf",
    "body": ["export default (${1:first}) => {${2:second}}"],
    "description": "Export default function"
  },
  "Export default named function": {
    "prefix": "ednf",
    "body": ["export default function ${1:first}(${2:second}) {${3:third}}"],
    "description": "Export default named function"
  },
  "Creates a method inside a class": {
    "prefix": "met",
    "body": ["${1:first} = (${2:second}) => {${3:third}}"],
    "description": "Creates a method inside a class"
  },
  "Creates a getter property inside a class": {
    "prefix": "pge",
    "body": ["get ${1:first}() {", "  return this.${2:second}", "}"],
    "description": "Creates a getter property inside a class"
  },
  "Creates a setter property inside a class": {
    "prefix": "pse",
    "body": ["set ${1:first}(${2:second}) {${3:third}}"],
    "description": "Creates a setter property inside a class"
  },
  "Creates a forEach statement": {
    "prefix": "fre",
    "body": ["${1:first}.forEach(${2:second} => {${3:third}})"],
    "description": "Creates a forEach statement"
  },
  "Iterating over property names of iterable objects": {
    "prefix": "fof",
    "body": ["for(let ${1:first} of ${2:second}) {${3:third}}"],
    "description": "Iterating over property names of iterable objects"
  },
  "Iterating over property values of iterable objects": {
    "prefix": "fin",
    "body": ["for(let ${1:first} in ${2:second}) {${3:third}}"],
    "description": "Iterating over property values of iterable objects"
  },
  "Creates an anonymous function": {
    "prefix": "anfn",
    "body": ["(${1:first}) => { ${2:second} }"],
    "description": "Creates an anonymous function"
  },
  "Creates a named function": {
    "prefix": "nfn",
    "body": ["const ${1:first} = (${2:second}) => { ${3:third} }"],
    "description": "Creates a named function"
  },
  "Creates and assigns a local variable using object destructing": {
    "prefix": "dob",
    "body": ["const {${2:second}} = ${1:first}"],
    "description": "Creates and assigns a local variable using object destructing"
  },
  "Creates and assigns a local variable using array destructing": {
    "prefix": "dar",
    "body": ["const [${2:second}] = ${1:first}"],
    "description": "Creates and assigns a local variable using array destructing"
  },
  "Executes the given function at specified intervals": {
    "prefix": "sti",
    "body": ["setInterval(() => { ${1:first} }, ${2:second})"],
    "description": "Executes the given function at specified intervals"
  },
  "Executes the given function after the specified delay": {
    "prefix": "sto",
    "body": ["setTimeout(() => { ${1:first} }, ${2:second})"],
    "description": "Executes the given function after the specified delay"
  },
  "Creates and returns a new Promise in the standard ES7 syntax": {
    "prefix": "prom",
    "body": ["return new Promise((resolve, reject) => { ${1:first} })"],
    "description": "Creates and returns a new Promise in the standard ES7 syntax"
  },
  "Creates and assigns a local variable using props destructing": {
    "prefix": "cp",
    "body": ["const { ${1:first} } = this.props"],
    "description": "Creates and assigns a local variable using props destructing"
  },
  "Creates and assigns a local variable using state destructing": {
    "prefix": "cs",
    "body": ["const { ${1:first} } = this.state"],
    "description": "Creates and assigns a local variable using state destructing"
  },
  "Adds a default constructor for it('', () => {})the class that contains props as arguments": {
    "prefix": "rconst",
    "body": [
      "constructor(props) {",
      "  super(props)",
      "",
      "  this.state = {",
      "     ${1:first}",
      "  }",
      "}"
    ],
    "description": "Adds a default constructor for it('', () => {})the class that contains props as arguments"
  },
  "Creates empty state object. To be used in a constructor.": {
    "prefix": "est",
    "body": ["state = { ${1:first} }"],
    "description": "Creates empty state object. To be used in a constructor."
  },
  "Invoked once, only on the client (not on the server), immediately after the initial rendering occurs.": {
    "prefix": "cdm",
    "body": ["componentDidMount() { ${1:first} }"],
    "description": "Invoked once, only on the client (not on the server), immediately after the initial rendering occurs."
  },
  "Invoked before rendering when new props or state are being received. ": {
    "prefix": "scu",
    "body": ["shouldComponentUpdate(nextProps, nextState) { ${1:first} }"],
    "description": "Invoked before rendering when new props or state are being received. "
  },
  "Invoked immediately after the component's updates are flushed to the DOM.": {
    "prefix": "cdup",
    "body": ["componentDidUpdate(prevProps, prevState) { ${1:first}} "],
    "description": "Invoked immediately after the component's updates are flushed to the DOM."
  },
  "Invoked immediately before a component is unmounted from the DOM.": {
    "prefix": "cwun",
    "body": ["componentWillUnmount() {${1:first} }"],
    "description": "Invoked immediately before a component is unmounted from the DOM."
  },
  "Invoked right before calling the render method, both on the initial mount and on subsequent updates.": {
    "prefix": "gdsfp",
    "body": ["static getDerivedStateFromProps(props, state) {${1:first}}"],
    "description": "Invoked right before calling the render method, both on the initial mount and on subsequent updates."
  },
  "Called right before mutations are made (e.g. before the DOM is updated)": {
    "prefix": "gsbu",
    "body": [
      "getSnapshotBeforeUpdate = (prevProps, prevState) => {${1:first}}"
    ],
    "description": "Called right before mutations are made (e.g. before the DOM is updated)"
  },
  "Create React context": {
    "prefix": "rcontext",
    "body": ["const ${1:first} = React.createContext()"],
    "description": "Create React context"
  },
  "Create ref statement used inside constructor": {
    "prefix": "cref",
    "body": ["this.${1:first}Ref = React.createRef()"],
    "description": "Create ref statement used inside constructor"
  },
  "Performs a shallow merge of nextState into current state": {
    "prefix": "ssf",
    "body": ["this.setState((state, props) => { return { ${1:first} }})"],
    "description": "Performs a shallow merge of nextState into current state"
  },
  "Access component's props": {
    "prefix": "props",
    "body": ["this.props.${1:first}"],
    "description": "Access component's props"
  },
  "componentState": {
    "prefix": "state",
    "body": ["this.state.${1:first}"],
    "description": "componentState"
  },
  "Binds this to a method": {
    "prefix": "bnd",
    "body": ["this.${1:first} = this.${1:first}.bind(this)"],
    "description": "Binds this to a method"
  },
  "commentBigBlock": {
    "prefix": "cmmb",
    "body": ["/**", " * ${1:first}", " */"],
    "description": "commentBigBlock"
  },
  "hocComponentWithRedux": {
    "prefix": "hocredux",
    "body": [
      "import React from 'react'",
      "import { connect } from 'react-redux'",
      "import PropTypes from 'prop-types'",
      "",
      "export const mapStateToProps = state => ({})",
      "",
      "export const mapDispatchToProps = {}",
      "",
      "export const ${1:first} = (WrappedComponent) => {",
      "  const hocComponent = ({ ...props }) => <WrappedComponent {...props} />",
      "",
      "  hocComponent.propTypes = {}",
      "",
      "  return hocComponent",
      "}",
      "",
      "export default WrapperComponent => connect(mapStateToProps, mapDispatchToProps)(${1:first}(WrapperComponent))",
      ""
    ],
    "description": "hocComponentWithRedux"
  },
  "hocComponent": {
    "prefix": "hoc",
    "body": [
      "import React from 'react'",
      "import PropTypes from 'prop-types'",
      "",
      "export default (WrappedComponent) => {",
      "  const hocComponent = ({ ...props }) => <WrappedComponent {...props} />",
      "",
      "  hocComponent.propTypes = {}",
      "",
      "  return hocComponent",
      "}",
      ""
    ],
    "description": "hocComponent"
  },
  "typeofSnippet": {
    "prefix": "tpf",
    "body": ["typeof ${1:first}"],
    "description": "typeofSnippet"
  }
}
