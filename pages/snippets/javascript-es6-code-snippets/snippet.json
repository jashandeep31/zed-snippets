{
  "Imports entire module statement in ES6 syntax": {
    "prefix": "imp",
    "body": "import ${2:moduleName} from '${1:module}'$0",
    "description": "Imports entire module statement in ES6 syntax"
  },
  "Imports entire module in ES6 syntax without module name": {
    "prefix": "imn",
    "body": "import '${1:module}'$0",
    "description": "Imports entire module in ES6 syntax without module name"
  },
  "Imports only a portion of the module in ES6 syntax": {
    "prefix": "imd",
    "body": "import { $2 } from '${1:module}'$0",
    "description": "Imports only a portion of the module in ES6 syntax"
  },
  "Imports everything as alias from the module in ES6 syntax": {
    "prefix": "ime",
    "body": "import * as ${2:alias} from '${1:module}'$0",
    "description": "Imports everything as alias from the module in ES6 syntax"
  },
  "Imports a specific portion of the module by assigning a local alias in ES6 syntax": {
    "prefix": "ima",
    "body": "import { ${2:originalName} as ${3:alias} } from '${1:module}'$0",
    "description": "Imports a specific portion of the module by assigning a local alias in ES6 syntax"
  },
  "Require a package": {
    "prefix": "rqr",
    "body": "require('${1:package}')",
    "description": "Require a package"
  },
  "Require a package to const": {
    "prefix": "req",
    "body": "const ${1:packageName} = require('${1:package}')$0",
    "description": "Require a package to const"
  },
  "Module exports from Common JS, node syntax at ES6": {
    "prefix": "mde",
    "body": "module.exports = {\n\t$0\n}\n",
    "description": "Module exports from Common JS, node syntax at ES6"
  },
  "Export named variable in ES6 syntax": {
    "prefix": "env",
    "body": "export const ${1:exportVariable} = ${2:localVariable}\n",
    "description": "Export named variable in ES6 syntax"
  },
  "Export named function in ES6 syntax": {
    "prefix": "enf",
    "body": "export const ${1:functionName} = (${2:params}) => {\n\t$0\n}\n",
    "description": "Export named function in ES6 syntax"
  },
  "Export default function in ES6 syntax": {
    "prefix": "edf",
    "body": "export default function ${1:${TM_FILENAME_BASE}}(${2:params}) {\n\t$0\n}\n",
    "description": "Export default function in ES6 syntax"
  },
  "Export default class in ES6 syntax": {
    "prefix": "ecl",
    "body": "export default class ${1:className} {\n\t$0\n}\n",
    "description": "Export default class in ES6 syntax"
  },
  "Export default class which extends a base one in ES6 syntax": {
    "prefix": "ece",
    "body": "export default class ${1:className} extends ${2:baseclassName} {\n\t$0\n}\n",
    "description": "Export default class which extends a base one in ES6 syntax"
  },
  "Add default constructor in a class in ES6 syntax": {
    "prefix": "con",
    "body": "constructor(${1:params}) {\n\t${0}\n}",
    "description": "Add default constructor in a class in ES6 syntax"
  },
  "Creates a method inside a class in ES6 syntax": {
    "prefix": "met",
    "body": "${1:methodName}(${2:params}) {\n\t${0}\n}",
    "description": "Creates a method inside a class in ES6 syntax"
  },
  "Creates a getter property inside a class in ES6 syntax": {
    "prefix": "pge",
    "body": "get ${1:propertyName}() {\n\treturn this.${0}\n}",
    "description": "Creates a getter property inside a class in ES6 syntax"
  },
  "Creates a setter property inside a class in ES6 syntax": {
    "prefix": "pse",
    "body": "set ${1:propertyName}(${2:value}) {\n\t${0}\n}",
    "description": "Creates a setter property inside a class in ES6 syntax"
  },
  "Creates a forEach statement in ES6 syntax": {
    "prefix": "fre",
    "body": "${1:array}.forEach(${2:currentItem} => {\n\t${0}\n})",
    "description": "Creates a forEach statement in ES6 syntax"
  },
  "Iterating over property names of iterable objects": {
    "prefix": "fof",
    "body": "for (const ${1:item} of ${2:object}) {\n\t${0}\n}",
    "description": "Iterating over property names of iterable objects"
  },
  "Iterating over property values of iterable objects": {
    "prefix": "fin",
    "body": "for (const ${1:item} in ${2:object}) {\n\t${0}\n}",
    "description": "Iterating over property values of iterable objects"
  },
  "Creates an anonymous function in ES6 syntax": {
    "prefix": "anfn",
    "body": "(${1:params}) => {\n\t${2}\n}",
    "description": "Creates an anonymous function in ES6 syntax"
  },
  "Creates a named function in ES6 syntax": {
    "prefix": "nfn",
    "body": "const ${1:name} = (${2:params}) => {\n\t${3}\n}",
    "description": "Creates a named function in ES6 syntax"
  },
  "Creates and assigns a local variable using object destructing": {
    "prefix": "dob",
    "body": "const {${2:propertyName}} = ${1:objectToDestruct}",
    "description": "Creates and assigns a local variable using object destructing"
  },
  "Creates and assigns a local variable using array destructing": {
    "prefix": "dar",
    "body": "const [${2:propertyName}] = ${1:arrayToDestruct}",
    "description": "Creates and assigns a local variable using array destructing"
  },
  "Executes the given function at specified intervals in ES6 syntax": {
    "prefix": "sti",
    "body": "setInterval(() => {\n\t${2}\n}, ${0:intervalInms})",
    "description": "Executes the given function at specified intervals in ES6 syntax"
  },
  "Executes the given function after the specified delay in ES6 syntax": {
    "prefix": "sto",
    "body": "setTimeout(() => {\n\t${2}\n}, ${1:delayInms})",
    "description": "Executes the given function after the specified delay in ES6 syntax"
  },
  "Creates and returns a new Promise in the standard ES6 syntax": {
    "prefix": "prom",
    "body": "return new Promise((resolve, reject) => {\n\t${1}\n})",
    "description": "Creates and returns a new Promise in the standard ES6 syntax"
  },
  "Add the .then and .catch methods to handle promises": {
    "prefix": "thenc",
    "body": ".then((${1:result}) => {\n\t${2}\n}).catch((${3:err}) => {\n\t${4}\n})",
    "description": "Add the .then and .catch methods to handle promises"
  },
  "If the specified expression is false, the message is written to the console along with a stack trace": {
    "prefix": "cas",
    "body": "console.assert(${1:expression}, ${2:object})",
    "description": "If the specified expression is false, the message is written to the console along with a stack trace"
  },
  "Clears the console": {
    "prefix": "ccl",
    "body": "console.clear()",
    "description": "Clears the console"
  },
  "Writes the the number of times that count() has been invoked at the same line and with the same label": {
    "prefix": "cco",
    "body": "console.count(${1:label})",
    "description": "Writes the the number of times that count() has been invoked at the same line and with the same label"
  },
  "Displays a message in the console. Also display a blue right arrow icon along with the logged message in Safari": {
    "prefix": "cdb",
    "body": "console.debug(${1:object})",
    "description": "Displays a message in the console. Also display a blue right arrow icon along with the logged message in Safari"
  },
  "Prints a JavaScript representation of the specified object": {
    "prefix": "cdi",
    "body": "console.dir(${1:object})",
    "description": "Prints a JavaScript representation of the specified object"
  },
  "Displays a message in the console and also includes a stack trace from where the method was called": {
    "prefix": "cer",
    "body": "console.error(${1:object})",
    "description": "Displays a message in the console and also includes a stack trace from where the method was called"
  },
  "Groups and indents all following output by an additional level, until console.groupEnd() is called.": {
    "prefix": "cgr",
    "body": "console.group('${1:label}')",
    "description": "Groups and indents all following output by an additional level, until console.groupEnd() is called."
  },
  "Closes out the corresponding console.group().": {
    "prefix": "cge",
    "body": "console.groupEnd()",
    "description": "Closes out the corresponding console.group()."
  },
  "Displays a message in the console": {
    "prefix": "clg",
    "body": "console.log(${1:object})",
    "description": "Displays a message in the console"
  },
  "Displays an object in the console with its name": {
    "prefix": "clo",
    "body": "console.log('${1:object} :', ${1:object})",
    "description": "Displays an object in the console with its name"
  },
  "Prints a stack trace from the point where the method was called": {
    "prefix": "ctr",
    "body": "console.trace(${1:object})",
    "description": "Prints a stack trace from the point where the method was called"
  },
  "Displays a message in the console but also displays a yellow warning icon along with the logged message": {
    "prefix": "cwa",
    "body": "console.warn(${1:object})",
    "description": "Displays a message in the console but also displays a yellow warning icon along with the logged message"
  },
  "Displays a message in the console but also displays a blue information icon along with the logged message": {
    "prefix": "cin",
    "body": "console.info(${1:object})",
    "description": "Displays a message in the console but also displays a blue information icon along with the logged message"
  },
  "Displays tabular data as a table.": {
    "prefix": "clt",
    "body": "console.table(${1:object})",
    "description": "Displays tabular data as a table."
  },
  "Sets starting point for execution time measurement": {
    "prefix": "cti",
    "body": "console.time(${1:object})",
    "description": "Sets starting point for execution time measurement"
  },
  "Sets end point for execution time measurement": {
    "prefix": "cte",
    "body": "console.timeEnd(${1:object})",
    "description": "Sets end point for execution time measurement"
  }
}
